{
  "name": "Couchbase-driver",
  "tagline": "An improved version of the official Couchbase driver",
  "body": "# couchbase-driver\r\n\r\nAn improved version of the official Couchbase driver.\r\n\r\n## Installation\r\n\r\n`npm install couchbase-driver`\r\n\r\n## Overview\r\n\r\nA simple alternative driver for [Couchbase](http://docs.couchbase.com/sdk-api/couchbase-node-client-2.1.4/) that wraps the `Bucket` from existing driver with the following modifications:\r\n\r\n* `get` works on a single key or an array of keys, calling `Bucket.getMulti` if appropriate. Automatically handles\r\n*key not found* errors and doesn't return an error in that scenario. In case of multiple keys, optionally returns an\r\narray of missing keys.\r\n* `remove` also handles *key not found* errors more gracefully.\r\n* adds `atomic` function that tries to do perform `get` + `transform` + specified database operation utilizing `CAS`\r\nin one step until success or maximum retries have occurred.\r\n* adds <code>Promise</code> support so that functions call be called with either Node-style callbacks or with Promises.\r\n\r\n## Usage\r\n\r\nCreating:\r\n\r\n```js\r\nconst couchbase = require('couchbase');\r\nconst Driver = require('couchbase-driver');\r\nconst cluster = new couchbase.Cluster('couchbase://127.0.0.1');\r\nconst bucket = cluster.openBucket('default');\r\nconst driver = Driver.create(bucket);\r\n```\r\n\r\nSimple retrieval:\r\n\r\n```js\r\ndriver.get('my_doc_key', (err, res) => {\r\n  if (err) return console.log(err)\r\n  console.dir(res.value)\r\n});\r\n```\r\n\r\nIf key does not exist `err` *and* `res` will be undefined.\r\n\r\nGetting multiple documents:\r\n\r\n```js\r\ndriver.get(['my_doc_key_1', 'my_doc_key_2', 'my_missing_doc_key_3'], (err, results, missing) => {\r\n  if (err) return console.log(err);\r\n  if (mising.length > 0) console.dir(missing); // ['my_missing_doc_key_3']\r\n    console.dir(res.value);\r\n});\r\n```\r\n\r\n\"Atomic\" transformations can be achieved using the `atomic` function which attempts to do `get` + `transform` +\r\nspecified database operation where `CAS` in `get` and the final operation have to match. This uses [`async.retry`](http://caolan.github.io/async/docs.html#.retry) until successful or maximum retries have occurred,\r\nwhich can be specified in the `Driver` construction or as function option parameter.\r\n\r\n```js\r\nfunction transform(doc) {\r\n  doc.foo = 'bar';\r\n  return {\r\n    value: doc,\r\n    action: Driver.DBOPS.UPSERT\r\n  };\r\n}\r\n\r\ndriver.atomic('my_doc_key', transform, (err, res) => {\r\n  if(err) return console.dir(err);\r\n  console.dir(res);\r\n});\r\n```\r\n\r\nWith promises:\r\n\r\n```js\r\nconst result = await driver.get('mykey');\r\nconsole.dir(result.value); // document\r\n```\r\n\r\nNote that with Promise style call and multiple keys we do not get misses.\r\n\r\n```js\r\nconst results = await driver.get(['mykey1', mykey2]);\r\nconsole.dir(_.map(results, 'value')); // array of documents\r\n```\r\n\r\n## API Reference\r\n\r\n<a name=\"Driver\"></a>\r\n\r\n### Driver\r\nA simple alternative driver for Couchbase that wraps the `Bucket` from existing driver and improves\r\n<code>get</code> and <code>remove</code> methods and adds <code>atomic</code> method.\r\n\r\n**Kind**: global class  \r\n\r\n* [Driver](#Driver)\r\n    * [new Driver(bucket, options)](#new_Driver_new)\r\n    * _instance_\r\n        * [.OPERATIONS](#Driver+OPERATIONS)\r\n        * [.get(keys, options, fn)](#Driver+get)\r\n        * [.remove(key, options, fn)](#Driver+remove)\r\n        * [.atomic(key, transform, options, fn)](#Driver+atomic)\r\n    * _static_\r\n        * [.OPERATIONS](#Driver.OPERATIONS)\r\n        * [.isKeyNotFound(err)](#Driver.isKeyNotFound)\r\n\r\n<a name=\"new_Driver_new\"></a>\r\n\r\n#### new Driver(bucket, options)\r\nConstructs the new instance. This should not be called directly, but rather use <code>create()</code>.\r\n\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| bucket | <code>Object</code> | the Couchbase <code>Bucket</code> |\r\n| options | <code>Object</code> | Options |\r\n| options.atomicRetryTimes | <code>Number</code> | The number of attempts to make within <code>atomic()</code>.                                             \t See <code>async.retry</code>. Default: <code>5</code>. |\r\n| options.atomicRetryInterval | <code>Number</code> | The time to wait between retries, in milliseconds, within <code>atomic()</code>.                                             \t See <code>async.retry</code>. Default: <code>0</code>. |\r\n| options.missing | <code>Boolean</code> | Whether to return missing. If <code>false</code> Does not return.                                    Useful for certain contexts. |\r\n\r\n<a name=\"Driver+OPERATIONS\"></a>\r\n\r\n#### driver.OPERATIONS\r\nGet operation enums\r\n\r\n**Kind**: instance property of <code>[Driver](#Driver)</code>  \r\n**Example**  \r\n```js\r\ndriver.DBOPS.UPSERT;\r\n```\r\n<a name=\"Driver+get\"></a>\r\n\r\n#### driver.get(keys, options, fn)\r\nA simplified get. Properly handles key not found errors. In case of multi call, returns array of found\r\nand an array of misses.\r\n\r\n**Kind**: instance method of <code>[Driver](#Driver)</code>  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| keys | <code>String</code> &#124; <code>Array</code> | a single key or multiple keys |\r\n| options | <code>Object</code> | Options for bucket <code>get</code> function |\r\n| options.missing | <code>Boolean</code> | Whether to return missing. If <code>false</code> Does not return.                                    Useful for certain contexts. This option takes presidence over the one set in                                    constructor. |\r\n| fn | <code>function</code> | callback |\r\n\r\n**Example**  \r\n```js\r\ndriver.get('my_doc_key', (err, res) => {\r\n  if (err) return console.log(err)\r\n  console.dir(res.value)\r\n}\r\n```\r\n**Example**  \r\n```js\r\ndriver.get(['my_doc_key_1', 'my_doc_key_2', 'my_missing_doc_key_3'], (err, results, missing) => {\r\n  if (err) return console.log(err);\r\n  if (mising.length > 0) console.dir(missing); // ['my_missing_doc_key_3']\r\n  console.dir(res.value);\r\n});\r\n```\r\n<a name=\"Driver+remove\"></a>\r\n\r\n#### driver.remove(key, options, fn)\r\nOur implementation of <code>Bucket.remove</code> that properly ignores key not found errors.\r\n\r\n**Kind**: instance method of <code>[Driver](#Driver)</code>  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| key | <code>String</code> | document key to remove |\r\n| options | <code>Object</code> | Options to pass to <code>Bucket.remove</code> |\r\n| fn | <code>function</code> | callback |\r\n\r\n**Example**  \r\n```js\r\ndriver.remove('my_doc_key', (err, res) => {\r\n  if (err) return console.log(err);\r\n});\r\n```\r\n<a name=\"Driver+atomic\"></a>\r\n\r\n#### driver.atomic(key, transform, options, fn)\r\nPerforms an \"atomic\" operation where it tries to first get the document given the <code>key</code>, then perform\r\nthe function <code>transform</code> on the value and then write using the CAS value in the <code>upsert</code>.\r\nIf the upsert fails due to a CAS value error, the whole process is retried.\r\n\r\n**Kind**: instance method of <code>[Driver](#Driver)</code>  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| key | <code>String</code> | document key |\r\n| transform | <code>function</code> | synchronous function to be performend on the document value. Function accepts the                               document or <code>undefined</code> if the document was not found. The function                               should perform any necessary mutation and return an object with <code>value</code>                               and <code>action</code>. <code>value</code> is the new value of the document.                               <code>action</code> should be one of <code>Driver.DBOPS</code> specifying the action                               to take with the new value. |\r\n| options | <code>String</code> | Options |\r\n| options.atomicRetryTimes | <code>Number</code> | The number of attempts to make within <code>atomic()</code>.                                             \t See <code>async.retry</code>. Default: <code>5</code>. |\r\n| options.atomicRetryInterval | <code>Number</code> | The time to wait between retries, in milliseconds, within <code>atomic()</code>.                                             \t See <code>async.retry</code>. Default: <code>0</code>. |\r\n| fn | <code>function</code> | callback |\r\n\r\n**Example**  \r\n```js\r\nfunction transform(doc) {\r\n  doc.foo = 'bar';\r\n  return {\r\n    value: doc,\r\n    action: Driver.DBOPS.UPSERT\r\n  };\r\n}\r\n\r\ndriver.atomic('my_doc_key', transform, (err, res) => {\r\n  if(err) return console.dir(err);\r\n  console.dir(res);\r\n});\r\n```\r\n<a name=\"Driver.OPERATIONS\"></a>\r\n\r\n#### Driver.OPERATIONS\r\nGet operation enums\r\n\r\n**Kind**: static property of <code>[Driver](#Driver)</code>  \r\n**Example**  \r\n```js\r\nDriver.DBOPS.UPSERT;\r\n```\r\n<a name=\"Driver.isKeyNotFound\"></a>\r\n\r\n#### Driver.isKeyNotFound(err)\r\nDetermines if error is a \"key not found\" error\r\n\r\n**Kind**: static method of <code>[Driver](#Driver)</code>  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| err | <code>Error</code> | the error to check |\r\n\r\n**Example**  \r\n```js\r\nDriver.isKeyNotFound(err);\r\n```\r\n<a name=\"DBOPS\"></a>\r\n\r\n### DBOPS : <code>enum</code>\r\nEnum for Database operations\r\n\r\n**Kind**: global constant  \r\n**Read only**: true  \r\n**Properties**\r\n\r\n| Name | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| UPSERT | <code>string</code> | <code>&quot;upsert&quot;</code> | Upsert operation |\r\n| REMOVE | <code>string</code> | <code>&quot;remove&quot;</code> | Remove operation |\r\n| NOOP | <code>string</code> | <code>&quot;noop&quot;</code> | No operation or action |\r\n\r\n<a name=\"create\"></a>\r\n\r\n### create(bucket, options) ⇒ <code>[Driver](#Driver)</code>\r\nCreate a Driver object by wrapping the Couchbase bucket and creates a new <code>Driver</code> instance and\r\nadds <code>Promise</code> support to the instance.\r\n\r\n**Kind**: global function  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| bucket | <code>Object</code> | The Couchbase <code>Bucket</code> instance to wrap. |\r\n| options | <code>Object</code> | Options |\r\n| options.atomicRetryTimes | <code>Number</code> | The number of attempts to make within <code>atomic()</code>.                                             \t See <code>async.retry</code>. Default: <code>5</code>. |\r\n| options.atomicRetryInterval | <code>Number</code> | The time to wait between retries, in milliseconds, within <code>atomic()</code>.                                             \t See <code>async.retry</code>. Default: <code>0</code>. |\r\n\r\n**Example**  \r\n```js\r\nconst couchbase = require('couchbase');\r\nconst Driver = require('couchbase-driver');\r\nconst cluster = new couchbase.Cluster('couchbase://127.0.0.1');\r\nconst bucket = cluster.openBucket('default');\r\nconst driver = Driver.create(bucket);\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}